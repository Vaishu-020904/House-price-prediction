# -*- coding: utf-8 -*-
"""HousepricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VnUNeooByqOxgGClt1PvsU2eAV7Oc5ME

# House Price Prediction
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Understand the data


df = pd.read_csv('/content/Housing.csv')
df.head()

print(df.tail())
print(df.shape)
print(df.info())

# statistical info
df.describe()

df.isnull().sum()

# to check duplicate
df.duplicated().sum()

# distribution of  all categorical col
for col in df.select_dtypes(include='object'):
  print(col)
  print(df[col].value_counts())
  print()

"""# Target variable analysis"""

# chk price in visualization
sns.histplot(df['price'], color='g', kde=True)
plt.title('Price Distribution')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

"""# DATA CLEANING AND PRE-PROCESSING"""

# create a copy of orginal data frame
df_copy = df.copy()

# check for duplicates
df_copy.duplicated().sum()

# to check the outliers of numerical columns

plt.figure(figsize=(9,5))
numerical_cols = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking', 'price']
for i, col in enumerate(numerical_cols):
  plt.subplot(2,3,i+1)
  sns.boxplot(y=df_copy[col])
  plt.title(col)
  plt.tight_layout()
plt.show()

# log transform the target variable
df_log = df_copy.copy()
df_log['price_log'] = np.log(df_log['price'])

# Show the effects of log transformation
plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
sns.histplot(df['price'], color='g', kde=True)
plt.title('Original Price Distribution')


plt.subplot(1,2,2)
sns.histplot(df_log['price_log'], color='g', kde=True)
plt.title('Log Transformed Price Distribution')
plt.tight_layout()
plt.show()

"""# categorical encoding

"""

# 1. Convert binary categorical variables to 1/0
binary_cols = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']
for col in binary_cols:
    df_log[col] = df_log[col].map({'yes': 1, 'no': 0, 'Yes': 1, 'No': 0})

print(df_log[binary_cols].head())

# Handle furnishing status with one-hot encoding
# Apply one-hot encoding
df_log = pd.get_dummies(df_log, columns=['furnishingstatus'], drop_first=True)

# Convert boolean columns to integers (0/1)
boolean_cols = ['furnishingstatus_semi-furnished', 'furnishingstatus_unfurnished']
for col in boolean_cols:
    df_log[col] = df_log[col].astype(int)

df_log.head()

"""#scaling"""

# Feature scaling for numerical variables
from sklearn.preprocessing import StandardScaler

num_features = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking']

# StandardScalee
scaler = StandardScaler()
df_log_std = df_log.copy()
df_log_std[num_features] = scaler.fit_transform(df_log[num_features])

df_log_std[num_features].head()

df_log_std.head()

"""#EDA"""

# univariate analysis(numerical)

num_col = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking']

plt.figure(figsize=(15, 10))
for i, col in enumerate(num_col):
    plt.subplot(2, 3, i + 1)
    sns.histplot(df_log[col], kde=True, color='b')
    plt.title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

# log price plot
plt.figure(figsize=(10, 5))
sns.histplot(df_log['price_log'], kde=True, color='g')
plt.title('Distribution of Log Transformed Price')
plt.xlabel('Log Transformed Price')

plt.show()

# categorical col plot

cat_col = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']

plt.figure(figsize=(15, 10))

for i, col in enumerate(cat_col):
  plt.subplot(2, 3, i + 1)
  sns.countplot(data=df_log, x=col, palette='Set2')
  plt.title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

# bivariate analysis
# relationship between numerical col and log price

plt.figure(figsize=(15,10))
for i, col in enumerate(num_col):
  plt.subplot(2,3,i+1)
  sns.regplot(x = col, y = 'price_log', data=df_log, color='orange', scatter_kws= {'alpha':0.4}, line_kws={'color':'red'})
  plt.title(f'Log Price vs {col}')
  plt.xlabel(col)
  plt.ylabel('Log Price')
  # calculate and display correlation
  corr = df_log[col].corr(df_log['price_log'])
  plt.text(0.05, 0.95, f'Correlation: {corr:.2f}', transform=plt.gca().transAxes, fontsize=10, verticalalignment='top')
  plt.tight_layout()
plt.show()

# relationship between categorical col and log price

plt.figure(figsize=(15,10))
for i, col in enumerate(cat_col):
  plt.subplot(2,3,i+1)
  sns.boxplot(x = col, y = 'price_log', data=df_log, color='orange')
  plt.title(f'Log Price vs {col}')
  plt.tight_layout()
plt.show()

# furnishing status vs logprice

plt.figure(figsize=(10, 5))
furnishing_data = df_log.copy()
furnishing_data['furnishing_status'] = 'furnished'
furnishing_data.loc[furnishing_data['furnishingstatus_semi-furnished'] == 1, 'furnishing_status'] = 'semi-furnished'
furnishing_data.loc[furnishing_data['furnishingstatus_unfurnished'] == 1, 'furnishing_status'] = 'unfurnished'

sns.boxplot(x='furnishing_status', y='price_log', data=furnishing_data, color='g')
plt.xlabel('Furnishing Status')
plt.title('Impact of Furnishing Status on Log Price')
plt.ylabel('Log Price')
plt.tight_layout()
plt.show()

"""# data preparation"""

df_log_std.columns

from sklearn.model_selection import train_test_split

target = 'price_log'
x = df_log_std.drop(target, axis=1)
y = df_log_std[target]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# buil the model

from sklearn.linear_model import LinearRegression

lr_model = LinearRegression()
lr_model.fit(x_train, y_train)

"""# prediction"""

# predicting target values

y_pred = lr_model.predict(x_test)

# evalution

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)


# Display the results
print(f"RÂ² Score: {r2:.4f}")
print(f"MAE: {mae:.4f}")
print(f"MSE: {mse:.4f}")
print(f"RMSE: {rmse:.4f}")